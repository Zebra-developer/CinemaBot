# main.py
import os
import asyncio
import httpx
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ—ë—É–≤ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞, –ê–ü–ò, –ø—Ä–æ–∫—Å–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")

TMDB_TOKEN = os.getenv("TMDB_TOKEN")
if not TMDB_TOKEN:
    raise RuntimeError("TMDB_TOKEN not set in .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
proxi = os.getenv("PROXY")
if not proxi:
    raise RuntimeError("PROXY not set in .env")


# FSM: —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class SearchMovieState(StatesGroup):
    waiting_for_query = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤—ã–∑—ã–≤–∞–µ–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç)
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", callback_data="menu_search"),
            InlineKeyboardButton(text="üé¨ –ê—Ñ–∏—à–∞", callback_data="menu_poster")
        ],
            
        [
            InlineKeyboardButton(text="–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ", callback_data="developer")
        ]
    ])


# –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def back_keyboard():
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]]
    )


async def info_developer(callback: CallbackQuery):
    text = '''
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Zebra_Developer.
–ú–æ—è –≤–∏–∑–∏—Ç–∫–∞:
https://my-business-card-4qs2.onrender.com
–°–≤—è–∑—å —Å–æ –º–Ω–æ–π: 
mail - parkerpitergoy@gmail.com
    '''
    await callback.message.answer(text=text, reply_markup=back_keyboard())


async def search_movie(query: str):
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ TMDb API"""
    url = "https://api.themoviedb.org/3/search/movie"
    headers = {
        "Authorization": f"Bearer {TMDB_TOKEN}",
        "Accept": "application/json"
    }
    params = {"query": query, "language": "ru-RU", "page": 1}

    try:
        async with httpx.AsyncClient(proxy=proxi, timeout=10) as client:
            r = await client.get(url, headers=headers, params=params)
            r.raise_for_status()
            data = r.json()
            return data.get("results", [])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TMDb:", e)
        return []


async def get_now_playing():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –∏–¥—É—Ç –≤ –∫–∏–Ω–æ"""
    url = "https://api.themoviedb.org/3/movie/now_playing"
    headers = {"Authorization": f"Bearer {TMDB_TOKEN}"}
    params = {"language": "ru-RU", "page": 1}

    try:
        async with httpx.AsyncClient(proxy=proxi, timeout=10) as client:
            r = await client.get(url, headers=headers, params=params)
            r.raise_for_status()
            return r.json().get("results", [])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TMDb:", e)
        return []


async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )


# –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
async def menu_callback(callback: CallbackQuery, state: FSMContext):
    if callback.data == "menu_search":
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", reply_markup=back_keyboard())
        await state.set_state(SearchMovieState.waiting_for_query)
    elif callback.data == "menu_poster":
        await show_poster_list(callback)
    elif callback.data == "back_to_menu":
        await callback.message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞
async def process_movie_query(message: Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer("–ù–∞–ø–∏—à–∏: /search <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞>", reply_markup=back_keyboard()) 
        return

    movies = await search_movie(query)
    if not movies:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_keyboard())
        await state.clear()
        return

    for movie in movies[:3]:
        title = movie.get("title")
        year = movie.get("release_date", "")[:4]
        overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        poster_path = movie.get("poster_path")
        reply_text = f"üí† {title} ({year})"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{movie['id']}")]
        ])

        if poster_path:
            photo_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
            await message.answer_photo(photo=photo_url, caption=reply_text, reply_markup=keyboard)
        else:
            await message.answer(reply_text, reply_markup=keyboard)
        
    await state.clear()  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞


async def details_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'"""
    movie_id = callback.data.split("_")[1]
    url = f"https://api.themoviedb.org/3/movie/{movie_id}"
    headers = {"Authorization": f"Bearer {TMDB_TOKEN}"}
    params = {"language": "ru-RU"}

    try:
        async with httpx.AsyncClient(proxy=proxi, timeout=10) as client:
            r = await client.get(url, headers=headers, params=params)
            r.raise_for_status()
            movie = r.json()

        title = movie.get("title")
        year = movie.get("release_date", "")[:4]
        overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        poster_path = movie.get("poster_path")
        reply_text = f"üí† {title} ({year})\n\n{overview}"

        if poster_path:
            photo_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
            await callback.message.answer_photo(photo=photo_url, caption=reply_text, reply_markup=back_keyboard())
        else:
            await callback.message.answer(reply_text, reply_markup=back_keyboard())

    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞.")
        print(e)


async def show_poster_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞—Ñ–∏—à–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ + –∫–Ω–æ–ø–∫–∏)"""
    movies = await get_now_playing()

    if not movies:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ñ–∏—à—É üòî", reply_markup=back_keyboard())
        return

    movies = movies[:10]  # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 10 —Ñ–∏–ª—å–º–æ–≤

    media = []

    for movie in movies:
        title = movie.get("title")
        year = movie.get("release_date", "")[:4]
        poster_path = movie.get("poster_path")
        movie_id = movie.get("id")

        reply_text = f"üé¨ {title} ({year})"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{movie_id}")]]
        )

        if poster_path:
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
            media.append(InputMediaPhoto(media=poster_url, caption=reply_text))  
        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            media.append(InputMediaPhoto(media="https://via.placeholder.com/500x750?text=No+Image", caption=reply_text))
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
    if media:
        await callback.message.answer_media_group(media)

    # –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
    buttons = []
    for movie in movies:
        buttons.append([InlineKeyboardButton(text=f"‚Ñπ {movie['title']}", callback_data=f"details_{movie['id']}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ 
    keyboard.inline_keyboard.append(back_keyboard().inline_keyboard[0])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: ", reply_markup=keyboard)


async def main():
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    dp.message.register(cmd_start, Command(commands=["start", "help"]))
    dp.message.register(process_movie_query, SearchMovieState.waiting_for_query)
    dp.callback_query.register(details_callback, F.data.startswith("details_"))
    dp.callback_query.register(menu_callback, F.data.startswith("menu_"))
    dp.callback_query.register(menu_callback, F.data == "back_to_menu")
    dp.callback_query.register(info_developer, F.data == 'developer')

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())